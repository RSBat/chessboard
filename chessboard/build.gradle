plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id "org.jetbrains.dokka"

    id "signing"
    id "maven-publish"
}

android {
    namespace = "dev.rsbat.chessboard"

    compileSdk 32

    defaultConfig {
        minSdk 21
        targetSdk 32

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        versionCode 2
        versionName "0.2.0"
    }

    buildFeatures {
        // Enables Jetpack Compose for this module
        compose true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.3.0-rc02'
    }

    publishing {
        singleVariant("release") {
        }
    }
    lintOptions {
        checkTestSources true
    }
}

dependencies {
    def compose_version = "1.2.0"

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.6.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // Compose
    implementation "androidx.compose.ui:ui:$compose_version"
    // Tooling support (Previews, etc.)
    implementation "androidx.compose.ui:ui-tooling:$compose_version"
    // Foundation (Border, Background, Box, Image, Scroll, shapes, animations, etc.)
    implementation "androidx.compose.foundation:foundation:$compose_version"
    // Test rules and transitive dependencies:
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    // Needed for createComposeRule, but not createAndroidComposeRule:
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_version"
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier.set("javadoc")
    from dokkaJavadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configuration.artifacts
}

publishing {
    publications {
        release(MavenPublication) {
            groupId = 'dev.rsbat'
            artifactId = 'chessboard'
            version android.defaultConfig.versionName

            pom {
                name = 'Compose chess board'
                description = 'Chess board implemented with Jetpack Compose'
                url = 'https://github.com/RSBat/chessboard'
                licenses {
                    license {
                        name = 'MIT license'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }
                developers {
                    developer {
                        id = 'rsbat'
                        name = 'Sergei Kozelko'
                        email = 'kozelkos@yandex.ru'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/RSBat/chessboard.git'
                    developerConnection = 'scm:git:ssh://github.com/RSBat/chessboard.git'
                    url = 'https://github.com/RSBat/chessboard'
                }
            }

            afterEvaluate {
                from components.release
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = android.defaultConfig.versionName.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = hasProperty("ossrhUsername") ? ossrhUsername : ""
                password = hasProperty("ossrhPassword") ? ossrhPassword : ""
            }
        }
    }
}

signing {
    sign publishing.publications.release
}
